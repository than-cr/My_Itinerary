<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/lib/main.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/main.dart" />
              <option name="originalContent" value="import 'package:firebase_core/firebase_core.dart';&#10;import 'package:flutter/material.dart';&#10;import 'package:flutter_dotenv/flutter_dotenv.dart';&#10;import 'package:my_itinerary/firebase_options.dart';&#10;import 'package:my_itinerary/screens/auth_screen.dart';&#10;import 'package:my_itinerary/screens/home_page.dart';&#10;import 'package:my_itinerary/services/auth_service.dart';&#10;&#10;Future&lt;void&gt; main() async {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;  &#10;  bool firebaseInitialized = false;&#10;&#10;  try {&#10;    await dotenv.load(fileName: '.env');&#10;&#10;    // More robust Firebase initialization check&#10;    try {&#10;      if (Firebase.apps.isEmpty) {&#10;        await Firebase.initializeApp(&#10;          options: DefaultFirebaseOptions.currentPlatform&#10;        );&#10;      } else {&#10;        // Firebase is already initialized, use the existing app&#10;        Firebase.app();&#10;      }&#10;      firebaseInitialized = true;&#10;    } on FirebaseException catch (e) {&#10;      if (e.code == 'duplicate-app') {&#10;        // App already exists, that's fine&#10;        firebaseInitialized = true;&#10;      } else {&#10;        rethrow;&#10;      }&#10;    }&#10;  } catch (e) {&#10;    // Continue with app initialization even if Firebase fails&#10;  }&#10;  &#10;  runApp(MyItinerary(firebaseInitialized: firebaseInitialized));&#10;}&#10;&#10;&#10;class MyItinerary extends StatelessWidget {&#10;  final bool firebaseInitialized;&#10;&#10;  const MyItinerary({super.key, this.firebaseInitialized = false});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return MaterialApp(&#10;      title: 'My Itinerary',&#10;      debugShowCheckedModeBanner: false,&#10;      theme: ThemeData(&#10;        colorScheme: ColorScheme.fromSeed(&#10;          seedColor: Colors.white,&#10;          primary: Colors.white,&#10;        ),&#10;      ),&#10;      home: _getInitialScreen(),&#10;    );&#10;  }&#10;&#10;  Widget _getInitialScreen() {&#10;    if (!firebaseInitialized) {&#10;      return const Scaffold(&#10;        body: Center(&#10;          child: Column(&#10;            mainAxisAlignment: MainAxisAlignment.center,&#10;            children: [&#10;              Icon(Icons.error, size: 64, color: Colors.red),&#10;              SizedBox(height: 16),&#10;              Text(&#10;                'No internet connection',&#10;                style: TextStyle(fontSize: 18),&#10;              ),&#10;              SizedBox(height: 8),&#10;              Text(&#10;                'Please check your internet connection and try again',&#10;                style: TextStyle(fontSize: 14, color: Colors.grey),&#10;              ),&#10;            ],&#10;          ),&#10;        ),&#10;      );&#10;    }&#10;&#10;    if (AuthService.currentUser != null) {&#10;      return const HomePage();&#10;    } else {&#10;      return const AuthScreen();&#10;    }&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:firebase_core/firebase_core.dart';&#10;import 'package:flutter/material.dart';&#10;import 'package:flutter_dotenv/flutter_dotenv.dart';&#10;import 'package:my_itinerary/firebase_options.dart';&#10;import 'package:my_itinerary/screens/auth_screen.dart';&#10;import 'package:my_itinerary/screens/home_page.dart';&#10;import 'package:my_itinerary/services/auth_service.dart';&#10;&#10;Future&lt;void&gt; main() async {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;  &#10;  bool firebaseInitialized = false;&#10;&#10;  try {&#10;    await dotenv.load(fileName: '.env');&#10;&#10;    // More robust Firebase initialization check&#10;    try {&#10;      if (Firebase.apps.isEmpty) {&#10;        await Firebase.initializeApp(&#10;          options: DefaultFirebaseOptions.currentPlatform&#10;        );&#10;      } else {&#10;        // Firebase is already initialized, use the existing app&#10;        Firebase.app();&#10;      }&#10;      firebaseInitialized = true;&#10;    } on FirebaseException catch (e) {&#10;      if (e.code == 'duplicate-app') {&#10;        // App already exists, that's fine&#10;        firebaseInitialized = true;&#10;      } else {&#10;        rethrow;&#10;      }&#10;    }&#10;  } catch (e) {&#10;    // Continue with app initialization even if Firebase fails&#10;  }&#10;  &#10;  runApp(MyItinerary(firebaseInitialized: firebaseInitialized));&#10;}&#10;&#10;&#10;class MyItinerary extends StatelessWidget {&#10;  final bool firebaseInitialized;&#10;&#10;  const MyItinerary({super.key, this.firebaseInitialized = false});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return MaterialApp(&#10;      title: 'My Itinerary',&#10;      debugShowCheckedModeBanner: false,&#10;      theme: ThemeData(&#10;        colorScheme: ColorScheme.fromSeed(&#10;          seedColor: Colors.white,&#10;          primary: Colors.white,&#10;        ),&#10;      ),&#10;      home: _getInitialScreen(),&#10;    );&#10;  }&#10;&#10;  Widget _getInitialScreen() {&#10;    if (!firebaseInitialized) {&#10;      return const Scaffold(&#10;        body: Center(&#10;          child: Column(&#10;            mainAxisAlignment: MainAxisAlignment.center,&#10;            children: [&#10;              Icon(Icons.error, size: 64, color: Colors.red),&#10;              SizedBox(height: 16),&#10;              Text(&#10;                'No internet connection',&#10;                style: TextStyle(fontSize: 18),&#10;              ),&#10;              SizedBox(height: 8),&#10;              Text(&#10;                'Please check your internet connection and try again',&#10;                style: TextStyle(fontSize: 14, color: Colors.grey),&#10;              ),&#10;            ],&#10;          ),&#10;        ),&#10;      );&#10;    }&#10;&#10;    if (AuthService.currentUser != null) {&#10;      return const HomePage();&#10;    } else {&#10;      return const AuthScreen();&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>